<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java能力框架之JVM原理</title>
      <link href="/2024/01/01/Java%E8%83%BD%E5%8A%9B%E6%A1%86%E6%9E%B6%E4%B9%8BJVM%E5%8E%9F%E7%90%86/"/>
      <url>/2024/01/01/Java%E8%83%BD%E5%8A%9B%E6%A1%86%E6%9E%B6%E4%B9%8BJVM%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1>JVM虚拟机模型: 一次编译，到处运行</h1><div class="mermaid">  graph TDA[JAVA程序] --&gt;  B[JAVA字节码]B[JAVA字节码] -- 解释 --&gt; C[Window Java虚拟机] --机器码--&gt; E[windows操作系统]B[JAVA字节码] -- 解释 --&gt; D[Linux Java虚拟机] --机器码--&gt; F[Linux操作系统]</div><p>java程序经过一次编译之后，将java代码编译为字节码也就是class文件，然后在不同的操作系统上依靠不同的java虚拟机进行解释，最后再转换为不同平台的机器码，最终得到执行。</p><h1>java程序执行流程</h1><div class="mermaid">  graph LRA[JAVA代码] --&gt; B[JAVA字节码-class文件] --&gt; C[JAVA HelloWorld] --&gt; D[加载配置JVM.cfg] --&gt; E[根据JVM.cfg找到jvm.dll] --&gt; F[初始化JVM,运行Java程序]  --&gt; G[找到main方法并运行]</div><p><strong>【编译Java代码】</strong></p><p>java代码通过编译之后生成字节码文件（class文件）。这个过程由JAVA编译器完成。</p><p><strong>【运行 <code>java HelloWorld</code> 指令】</strong></p><p>运行<code>java HelloWorld</code>执行java程序，java会根据系统版本找到jvm.cfg，由该文件找到对应的JVM编译命令，对java程序进行编译。其中<code>$\JAVA_HOME\jre\lib${amd64}\jvm.cfg</code> 大致内容长这样：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Copyright (c) 2003, 2013, Oracle and/or its affiliates. All rights reserved.</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">You may also <span class="keyword">select</span> a JVM <span class="keyword">in</span> an arbitrary location with the</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">"-XXaltjvm=&lt;jvm_dir&gt;"</span> option, but that too is unsupported</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">and may not be available <span class="keyword">in</span> a future release.</span> </span><br><span class="line"></span><br><span class="line">-Xms 1024</span><br><span class="line">-server KNOWN</span><br><span class="line">-client IGNORE</span><br></pre></td></tr></tbody></table></figure><blockquote><p>server KNOWN 和 client IGNORE：分别说明当前JVM运行于服务端模型，而不是客户端模型 即 server KNOWN 就表示名称为server的jvm可用, 且如笔者主机下的地方找到对应的jvm.dll<br>…\JetBrains\IntelliJ IDEA…\jbr\bin\server\jvm.dll<br>…\Java\jre\bin\server\jvm.dll …</p></blockquote><p><strong>【JVM.cfg】</strong></p><p>jvm.dll则是java虚拟机的主要实现。</p><p>【<strong>运行程序</strong>】</p><p>通过JNI接口（它还常用于java与操作系统、硬件交互），找到class文件后并装载进JVM，然后找到main方法，最后执行。</p><h1>JVM基本结构</h1><p>JVM是可运行Java代码的假想计算机 ，包括一套字节码指令集、一组寄存器、一个栈、一个垃圾回收，堆 和 一个存储方法域。JVM是运行在操作系统之上的，它与硬件没有直接的交互。下图是JVM的基本结构：</p><p><img src="Java%E8%83%BD%E5%8A%9B%E6%A1%86%E6%9E%B6%E4%B9%8BJVM%E5%8E%9F%E7%90%86.assets/image-20240101182525778.png" alt="image-20240101182525778"></p><p>class文件被jvm装载以后，经过jvm的内存空间调配，最终是由执行引擎完成class文件的执行。当然这个过程还有其他角色模块的协助，这些模块协同配合才能让一个java程序成功的运行，下面就详细介绍这些模板，它们也是后面<strong>学习jvm最重要的部分</strong>。</p><p>【<strong>内存空间</strong>】</p><p>JVM内存空间包含：方法区、java堆、java栈、本地方法栈。</p><p>【<strong>方法区</strong>】</p><p>方法区是各个线程共享的区域，存放类信息、常量、静态变量。</p><p>【<strong>java堆</strong>】</p><p>java堆也是线程共享的区域，我们的类的实例就放在这个区域。</p><p>可以想象你的一个系统会产生很多实例，因此java堆的空间也是最大的。如果java堆空间不足了，程序会抛出OutOfMemoryError异常。</p><p><strong>堆内存划分</strong>：</p><ul><li><p>JDK 1.8和以前<br>在JDK7以及其前期的JDK版本号中。堆内存通常被分为三块区域Nursery内存(young generation)、长时内存(old generation)、永久内存(Permanent Generation for VM Matedata)。</p></li><li><p>JDK 1.8以后<br>JDK 1.8以后Java 堆主要分为2个区域-年轻代与老年代，年轻代包括Eden 区和 Survivor 区，Survivor 区又分From区和 To区。</p></li></ul><blockquote><p>JDK 1.8以后不再用永久带，永久代已经不存在，存储的类信息、编译后的代码数据等已经移动到了元空间（MetaSpace）中，元空间并没有处于堆内存上，而是直接占用的本地内存（NativeMemory）。</p></blockquote><p>【<strong>java栈</strong>】</p><p>栈也叫栈内存，主管Java程序的运行，是在线程创建时创建，一个线程对应一个java栈，每执行一个方法就会往栈中压入一个元素。它的生命期是跟随线程的生命期，线程结束栈内存也就释放，对于栈来说不存在垃圾回收问题，只要线程一结束该栈就Over，生命周期和线程一致，是线程私有的。</p><p>往栈中压入一个元素叫“栈帧”，而栈帧中包括了方法中的局部变量、用于存放中间状态值的操作栈。</p><blockquote><p>如果java栈空间不足了，程序会抛出StackOverflowError异常<br>想一想什么情况下会容易产生这个错误：<strong>递归</strong>，递归如果深度很深，就会执行大量的方法，方法越多java栈的占用空间越大。</p></blockquote><h3 id="栈运行原理">栈运行原理</h3><p>栈中的数据都是以栈帧（Stack Frame）的格式存在，栈帧是一个内存区块，是一个数据集，是一个有关方法和运行期数据的数据集。当一个方法A被调用时就产生了一个栈帧F1，并被压入到栈中，A方法又调用了B方法，于是产生栈帧F2也被压入栈，B方法又调用了C方法，于是产生栈帧F3也被压入栈…… 依次执行完毕后，先弹出后进…F3栈帧，再弹出F2栈帧，再弹出F1栈帧。其顺序遵循<strong>先进后出</strong>、<strong>后进先出</strong>原则。</p><h3 id="帧的组成">帧的组成</h3><ol><li><p>局部变量表(Local Stack Frame)：是一组变量值的存储空间，包括方法参数和局部变量，其中方法参数按照声明顺序严格放置，局部变量可任意放置。</p></li><li><p>操作数栈(Operand Stack):  也称为操作栈，是一个后入先出栈。在Class 文件的Code 属性的 max_stacks 指定了执行过程中最大的栈深度。</p></li><li><p>动态链接(Dynamic Linking):  每个栈帧都包含一个执行运行时常量池中该栈帧所属方法的引用，该引用可支持方法调用过程中的动态连接(Dynamic Linking)。</p></li><li><p>返回地址(Return Address)： 当一个方法被执行后，有两种方式退出该方法：执行引擎遇到了任意一个方法返回的字节码指令或遇到了异常，并且该异常没有在方法体内得到处理。方法退出的过程实际上等同于把当前栈帧出栈。</p></li></ol><p>【<strong>本地方法栈</strong>】</p><p>本地方法栈角色和java栈类似，只不过它是用来表示执行本地方法的，本地方法栈存放的方法调用本地方法接口，最终调用本地方法库，实现与操作系统、硬件交互的目的。</p><p>【<strong>PC寄存器</strong>】</p><p>PC寄存器的作用就是控制程序指令的执行顺序。执行引擎就是根据PC寄存器调配的指令顺序，依次执行程序指令。</p><blockquote><p>“类已经加载了，实例对象、方法、静态变量都去了自己该去的地方"，那么程序该怎么执行，哪个方法先执行，哪个方法后执行，这些指令执行的顺序就是PC寄存器在管。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java能力框架之JVM调优</title>
      <link href="/2024/01/01/Java%E8%83%BD%E5%8A%9B%E6%A1%86%E6%9E%B6%E4%B9%8BJVM%E8%B0%83%E4%BC%98/"/>
      <url>/2024/01/01/Java%E8%83%BD%E5%8A%9B%E6%A1%86%E6%9E%B6%E4%B9%8BJVM%E8%B0%83%E4%BC%98/</url>
      
        <content type="html"><![CDATA[<p>操作系统级别Java进程所占用的内存数值不能准确的反应堆内存的真实占用情况，因为GC过后这个值是不会变化的，内存调优的时候要更多地使用JDK提供的内存查看工具，比如JConsole和Java VisualVM。</p><h1>Full GC</h1><h2 id="Full-GC的几种情况">Full GC的几种情况</h2><p>对JVM内存的系统级的调优主要的目的是减少GC的频率和Full GC的次数，过多的GC和Full GC是会占用很多的系统资源（主要是CPU），影响系统的吞吐量。特别要关注Full GC，因为它会对整个堆进行整理，导致Full GC一般由于以下几种情况：</p><ul><li>旧生代空间不足<br>调优时尽量让对象在新生代GC时被回收、让对象在新生代多存活一段时间和不要创建过大的对象及数组避免直接在旧生代创建对象。</li><li>Pemanet Generation空间不足</li><li>增大Perm Gen空间，避免太多静态对象</li><li>统计得到的GC后晋升到旧生代的平均大小大于旧生代剩余空间</li><li>控制好新生代和旧生代的比例</li><li>System.gc()被显示调用</li><li>垃圾回收不要手动触发，尽量依靠JVM自身的机制</li></ul><h2 id="调优比例不良设置会导致的后果">调优比例不良设置会导致的后果</h2><p>调优手段主要是通过控制堆内存的各个部分的比例和GC策略来实现，各部分比例不良设置会导致什么后果。</p><h3 id="新生代设置过小，有以下两种情况">新生代设置过小，有以下两种情况</h3><ul><li>会让新生代GC次数非常频繁，增大系统消耗；</li><li>会导致大对象直接进入旧生代，占据了旧生代剩余空间，诱发Full GC。</li></ul><h3 id="新生代设置过大，有以下两种情况">新生代设置过大，有以下两种情况</h3><ul><li>会导致旧生代过小（堆总量一定），从而诱发Full GC；</li><li>新生代GC耗时大幅度增加，一般说来新生代占整个堆1/3比较合适；</li></ul><h3 id="Survivor设置过小">Survivor设置过小</h3><p>导致对象从eden直接到达旧生代，降低了在新生代的存活时间。</p><h3 id="Survivor设置过大">Survivor设置过大</h3><p>导致eden过小，增加了GC频率。</p><h1>调优策略</h1><p>由内存管理和垃圾回收可知新生代和旧生代都有多种GC策略和组合搭配，选择这些策略对于我们这些开发人员是个难题，JVM提供两种较为简单的GC策略的设置方式：</p><h2 id="吞吐量优先">吞吐量优先</h2><p>JVM以吞吐量为指标，自行选择相应的GC策略及控制新生代与旧生代的大小比例，来达到吞吐量指标。这个值可由<code>-XX:GCTimeRatio=n</code>来设置</p><h2 id="暂停时间优先">暂停时间优先</h2><p>JVM以暂停时间为指标，自行选择相应的GC策略及控制新生代与旧生代的大小比例，尽量保证每次GC造成的应用停止时间都在指定的数值范围内完成。这个值可由<code>-XX:MaxGCPauseRatio=n</code>来设置。</p><h1>JVM参数设置</h1><h2 id="堆内存">堆内存</h2><ul><li>-Xms:  或-XX:InitialHeapSize，最小堆内存,单位是Byte,m,g等</li><li>-Xmx：或 -XX:MaxHeapSize，最大堆内存,单位是Byte,m,g等<br>比如<code>java -Xms128m -Xmx2g </code></li></ul><h2 id="新生代">新生代</h2><ul><li><p>-XX:NewSize  初始时年轻区内存，通常为 Xmx 的 1/3 或 1/4。</p></li><li><p>-XX:MaxNewSize 最大年轻区内存</p></li><li><p>-XX:MaxTenuringThreshold<br>来控制新生代存活时间，尽量让对象在新生代被回收。 新生代=Eden + 2 个 Survivor空间, 但实际可用空间为 = Eden + 1 个 Survivor，即 90%。</p></li></ul><h2 id="新老比值变化">新老比值变化</h2><ul><li><p>-XX:NewRatio 指定老年代与新生代的堆大小比例。在使用CMS收集器时，此参数失效</p></li><li><p>-XX:SurvivorRatio<br>新生代中 Eden 与 Survivor 的比值。默认值为 8,即 Eden 占新生代空间的 8/10，另外两个 Survivor 各占 1/10。</p></li><li><p>-MinHeapFreeRatio<br>指定jvm heap在使用率小于所设定的值，heap进行收缩，Xmx==Xms的情况下无效</p></li><li><p>-XX:MaxHeapFreeRatio<br>指定jvm heap在使用率大于n的情况下,heap进行扩张,Xmx==Xms的情况下无效</p></li></ul><h2 id="线程栈">线程栈</h2><ul><li>-Xss：线程栈大小</li></ul><h2 id="Java-heap页大小">Java heap页大小</h2><ul><li>-XX:LargePageSizeInBytes：指定Java heap的分页页面大小</li></ul><h2 id="压缩类指针">压缩类指针</h2><ul><li><p>-XX:+UseCompressedClassPointers<br>压缩类指针。对象的类指针（_klass）被压缩至32bit，使用类指针压缩空间的基地址</p></li><li><p>-UseCompressedOops<br>压缩对象指针，oops是普通对象指针，Java堆中对象的对象指针被压缩到32bit，使用堆基地址。</p></li></ul><blockquote><p>注意：64bit的服务器上设置-Xmx32g时，-XX:+UseCompressedOops和-XX:+UseCompressedClassPointers会失效，所以最大的堆设置为<strong>31g</strong>。</p></blockquote><h2 id="永久代-jdk8以前">永久代(jdk8以前)</h2><ul><li>-XX:PermSize 永久代初始大小</li><li>-XX:MaxPermSize：永久代大小的最大值</li></ul><h2 id="元数据相关-jdk8及以后">元数据相关(jdk8及以后)</h2><ul><li><p>-XX:MetaspaceSize 初始空间大小，达到该值就会触发垃圾收集进行类型卸载。</p></li><li><p>-XX:MaxMetaspaceSize 最大空间，默认是没有限制的。</p></li><li><p>-XX:MinMetaspaceFreeRatio 在GC之后，最小的Metaspace剩余空间容量的百分比，减少为分配空间所导致的垃圾收集</p></li><li><p>-XX:MaxMetaspaceFreeRatio 在GC之后，最大的Metaspace剩余空间容量的百分比，减少为释放空间所导致的垃圾收集</p></li><li><p>-XX:MaxMetaspaceExpansion Metaspace增长时的最大幅度</p></li><li><p>-XX:MinMetaspaceExpansion  Metaspace增长时的最小幅度</p></li></ul><h2 id="垃圾回收统计信息">垃圾回收统计信息</h2><ul><li>-XX:+PrintGC</li><li>-XX:+PrintGCDetails</li><li>-XX:+PrintGCTimeStamps</li><li>-Xloggc:filename</li></ul><h2 id="回收器设置">回收器设置</h2><ul><li>-XX:+UseSerialGC: 设置串行收集器</li><li>-XX:+UseParallelGC: 设置并行收集器</li><li>-XX:+UseParalledlOldGC:设置并行年老代收集器</li><li>-XX:+UseConcMarkSweepGC:设置并发收集器</li></ul><h2 id="并行收集器设置">并行收集器设置</h2><ul><li><p>-XX:ParallelGCThreads<br>指定并行 GC 线程的数量。默认情况下，当 CPU 数量小于8，ParallelGCThreads 的值等于 CPU 数量，当 CPU 数量大于 8 时，则使用公式：<code>ParallelGCThreads = 8 + ((N - 8) * 5/8) = 3 +（（5*CPU）/ 8）</code>。</p></li><li><p>-XX:MaxGCPauseMillis:设置并行收集最大暂停时间</p></li><li><p>-XX:GCTimeRatio: 设置垃圾回收时间占程序运行时间的百分比<code>公式为1/(1+n)</code>。</p></li><li><p>-XX:+CMSIncrementalMode: 设置为增量模式，适用于单CPU情况。</p></li></ul><h2 id="生成堆内存快照">生成堆内存快照</h2><ul><li>-XX:+HeapDumpOnOutOfMemoryError：让JVM在发生内存溢出时自动的生成堆内存快照。</li><li>-XX:HeapDumpPath：快照存储路径，默认保存在JVM的启动目录下名为java_pid<pid>.hprof</pid></li><li>-XX:OnOutOfMemoryError: 异常发生时执行一些操作</li></ul><h2 id="代码缓存">代码缓存</h2><ul><li><p>-XX:InitialCodeCacheSize</p></li><li><p>-XX:ReservedCodeCacheSize<br>代码缓存确实很少引起性能问题，但是一旦发生其影响可能是毁灭性的。如果代码缓存被占满，JVM会打印出一条警告消息，并切换到interpreted-only 模式：JIT编译器被停用，字节码将不再会被编译成机器码。应用程序将继续运行，但运行速度会降低一个数量级，直到有人注意到这个问题。</p></li><li><p>-XX:+UseCodeCacheFlushing</p></li></ul><p>当代码缓存被填满时让JVM放弃一些编译代码，避免当代码缓存被填满的时候JVM切换到interpreted-only 模式 。</p><br><h1>后记</h1><p>该类文章网上已经非常多，但是能完整的全面且清晰的写下来的，需要精力与耐力。为了JYM，笔者多写一文。</p><p><br><br></p><p><strong>参考</strong></p><p><a href="http://niweiwei.iteye.com/blog/2123347">http://niweiwei.iteye.com/blog/2123347</a></p><p><a href="https://blog.csdn.net/huaweitman/article/details/50552960">https://blog.csdn.net/huaweitman/article/details/50552960</a></p><p><a href="http://www.cnblogs.com/redcreen/archive/2011/05/05/2038331.html%EF%BC%8Cjvm%E8%B0%83%E4%BC%98%E5%8F%82%E8%80%83%E9%85%8D%E7%BD%AE">http://www.cnblogs.com/redcreen/archive/2011/05/05/2038331.html，jvm调优参考配置</a></p><p><a href="http://ifeve.com/useful-jvm-flags-part-4-heap-tuning/">http://ifeve.com/useful-jvm-flags-part-4-heap-tuning/</a></p><p><a href="https://blog.csdn.net/liubenlong007/article/details/78143285">https://blog.csdn.net/liubenlong007/article/details/78143285</a></p><p><a href="https://www.cnblogs.com/redcreen/archive/2011/05/04/2037057.html">https://www.cnblogs.com/redcreen/archive/2011/05/04/2037057.html</a></p><p><a href="https://www.cnblogs.com/zhulin-jun/p/6516292.html">https://www.cnblogs.com/zhulin-jun/p/6516292.html</a></p><p><a href="https://blog.csdn.net/beautygao/article/details/79083058">https://blog.csdn.net/beautygao/article/details/79083058</a></p><p><a href="https://blog.csdn.net/liubenlong007/article/details/78143285">https://blog.csdn.net/liubenlong007/article/details/78143285</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sarah小站首页</title>
      <link href="/2024/01/01/sarah-index/"/>
      <url>/2024/01/01/sarah-index/</url>
      
        <content type="html"><![CDATA[<p>欢迎来到Sarah小站</p>]]></content>
      
      
      <categories>
          
          <category> Sarah小站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sarah </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java能力框架</title>
      <link href="/2023/12/31/java-competence-framewor/"/>
      <url>/2023/12/31/java-competence-framewor/</url>
      
        <content type="html"><![CDATA[<p>JAVA从初学到资深再到专家，是一个循序渐进的过程，不仅要coding，还要对IT知识体系有认知。以下是笔者认为高阶JAVA技术人员需要掌握的整体能力框架。相关内容的掌握的深浅直接反映其技术水平。</p><blockquote><p>改为文字，这样后面调整好修改</p></blockquote><h1>基础知识</h1><h2 id="计算机基础">计算机基础</h2><div class="mermaid">  graph TD计算机基础 --&gt; 操作系统计算机基础 --&gt; 数据结构计算机基础 --&gt; 网络计算机基础 --&gt; 算法</div><h2 id="Java">Java</h2><div class="mermaid">  graph TDJava --&gt; JVMJava --&gt; 语言特性Java --&gt; 多线程Java --&gt; IO编程</div><h1>项目经验</h1><div class="mermaid">  graph TD项目经验 --&gt; 项目描述项目经验 --&gt; 项目难点项目经验 --&gt; 项目问题项目经验 --&gt; 项目改进项目经验 --&gt; 理论知识理论知识 --&gt; WEB理论知识 --&gt; 敏捷</div><h1>架构能力</h1><h2 id="基础架构能力">基础架构能力</h2><div class="mermaid">  graph TD基础架构能力 --&gt; Docker基础架构能力 --&gt; K8S基础架构能力 --&gt; Prometheus基础架构能力 --&gt; CAP理论基础架构能力 --&gt; 领域驱动设计</div><h2 id="微服务架构">微服务架构</h2><div class="mermaid">  graph TD微服务架构  --&gt; 注册中心微服务架构  --&gt; 流量控制微服务架构  --&gt; 分布式事务微服务架构  --&gt; 链路跟踪微服务架构  --&gt; ...</div><h1>应用知识</h1><h2 id="常用工具">常用工具</h2><div class="mermaid">  graph TD常用工具 --&gt; 排查类常用工具 --&gt; 协作类常用工具 --&gt; 保障类常用工具 --&gt; 系统类</div><h2 id="常用框架">常用框架</h2><div class="mermaid">  graph TD常用框架 --&gt; Spring常用框架 --&gt; Netty常用框架 --&gt; Dubbo常用框架 --&gt; Mybatic常用框架 --&gt; 细分领域常用框架 --&gt; ...</div><h2 id="队列">队列</h2><div class="mermaid">  graph TD常用框架 --&gt; Kafka常用框架 --&gt; ActiveMQ常用框架 --&gt; RabbitMQ常用框架 --&gt; ...</div><h2 id="数据库">数据库</h2><div class="mermaid">  graph TD数据库 --&gt; RMDB数据库 --&gt; NoSql数据库 --&gt; 图数据库数据库 --&gt; 向量数据库数据库 --&gt; ...</div><h2 id="缓存">缓存</h2><div class="mermaid">  graph TD缓存 --&gt; redis缓存 --&gt; ehcache缓存 --&gt; ...</div><h2 id="云平台">云平台</h2><div class="mermaid">  graph TD云平台 --&gt; 阿里云平台 --&gt; 腾讯云平台 --&gt; 华为云平台 --&gt; Ucloud云平台 --&gt; 百度云平台 --&gt; AWS云平台 --&gt; AZure云平台 --&gt; GoogleCloud</div><h1>文档能力</h1><div class="mermaid">  graph TD文档能力 --&gt; 方案编写文档能力 --&gt; 概要设计文档能力 --&gt; 详细设计</div><p><br><br></p><p>我们抛开JAVA语言本身，将其他语言生态的相关功能置入，同样适用。</p><blockquote><p>当时较懒，对于图中的内容，笔者只更新了两个文章, 不久之后将由其他博客搬至JJ。再有后续的有时间再添加上。</p></blockquote><p><a href="https://juejin.cn/post/7296017029705318419">Jvm原理</a><br><a href="https://juejin.cn/post/7296017029705318419">Jvm调优</a><br>…</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
